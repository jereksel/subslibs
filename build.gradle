import org.gradle.api.publish.maven.MavenPublication

buildscript {
    ext {
        kotlin_version = '1.2.30'
        anko_version = '0.10.1'
        support_library_version = "26.1.0"
        coroutines_version = "0.21.2"
        aa_version = "4.3.1"
        dagger_version = "2.10"
        room_version = "1.0.0"
        arrow_version = "0.6.1"
        assertj_version = "3.8.0"
        assertj_android_version = "1.2.0"
        slf4j_version = "1.7.25"
        activity_starter_version = "1.00-beta.2"
        logback_android_version = "1.1.1-6"
        robolectric_version = "3.5.1"
        junit_version = "4.12"
        guava_version = "20.0"
        mockito_version = "2.10.0"
        //DON'T UPDATE: https://github.com/kotlintest/kotlintest/issues/174
        kotlintest_version = "1.3.5"
        mockito_kotlin_version = "1.3.0"

        //Libs

        kotlinLib = "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        kotlinReflect = "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

        //Compat libraries
        supportLibrary = [
                appcompat: "com.android.support:appcompat-v7:$support_library_version",
                recyclerview: "com.android.support:recyclerview-v7:$support_library_version",
                cardview: "com.android.support:cardview-v7:$support_library_version",
                design: "com.android.support:design:$support_library_version",
                pallete: "com.android.support:palette-v7:$support_library_version"
        ]

        anko = "org.jetbrains.anko:anko:$anko_version"
        ankoRecyclerView = "org.jetbrains.anko:anko-recyclerview-v7:$anko_version"

        rxjava = 'io.reactivex.rxjava2:rxjava:2.1.4'
        rxkotlin = 'io.reactivex.rxjava2:rxkotlin:2.2.0'
        rxandroid = 'io.reactivex.rxjava2:rxandroid:2.0.1'

        dagger = "com.google.dagger:dagger:$dagger_version"
        daggerCompiler = "com.google.dagger:dagger-compiler:$dagger_version"

        guava = "com.google.guava:guava:$guava_version"

        slf4japi = "org.slf4j:slf4j-api:$slf4j_version"

        //Testing libs
        junit = "junit:junit:$junit_version"
        robolectric = "org.robolectric:robolectric:$robolectric_version"
        mockito =  "org.mockito:mockito-core:$mockito_version"

        assertj = "org.assertj:assertj-core:$assertj_version"

    }

    repositories {
        jcenter()
        mavenCentral()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
//        classpath 'org.codehaus.groovy:groovy-android-gradle-plugin:1.1.0'
//        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.5.0'
//        classpath ('net.saliman:gradle-cobertura-plugin:2.4.0');
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.1'
        classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.7.3'
        classpath 'com.vanniktech:gradle-android-junit-jacoco-plugin:0.10.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

repositories {
    mavenCentral()
}

def GROUP = "com.jereksel.subslibs"
def VERSION_NAME = "0.0.1"

subprojects { project ->

    project.evaluate()

    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    group = GROUP
    version = VERSION_NAME

    def androidProject = true

    try {
        android
    } catch (Exception ignored) {
        androidProject = false
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'

        if (androidProject) {
            from android.sourceSets.main.java.srcDirs
        } else {
            from sourceSets.main.allSource
        }
    }

    publishing {
        publications {

            MyPublication(MavenPublication) {
                if (androidProject) {

                    pom.withXml { xml ->

                        def dependenciesNode = xml.asNode().appendNode('dependencies')

                        // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                        configurations.implementation.allDependencies.each {
                            // Ensure dependencies such as fileTree are not included.
                            if (it.name != 'unspecified') {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }

                } else {
                    from project.components.java
                }

                groupId GROUP
                artifactId project.name
                artifact sourceJar
            }
        }
    }

    bintray {
        override = true
        publish = true
        user = System.getenv("BINTRAY_USER")
        key = System.getenv("BINTRAY_KEY")
        pkg {
            repo = 'maven'
            name = 'subslibs'
            licenses = ['WTFPL']
            publish = true
            configurations = ['archives']
            vcsUrl = 'https://github.com/jereksel/subslibs.git'
            version {
                name = VERSION_NAME
                released = new Date()
            }
        }
        publications = ['MyPublication']
    }

}